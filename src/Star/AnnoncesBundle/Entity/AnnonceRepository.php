<?php

namespace Star\AnnoncesBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
/**
 * AnnonceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnnonceRepository extends EntityRepository
{


    public function getlastAnnonces($maxAdds = 10){
        
        $qb = $this->createQueryBuilder('a')
            ->orderBy('a.createdAt', 'DESC');
        
            // check validty : select created_at, DATE_ADD(created_at, INTERVAL 2 year) from Annonce ;
            $qb->andWhere("DATE_ADD(a.validatedAt, a.validity, 'DAY') > CURRENT_DATE()");

            // Is valid adds ?
            $qb->andWhere("a.isEnabled = 1");
        
            //$maxAdds = $this->container->getParameter('max_adds_per_page');

            $qb->orderBy('a.createdAt', 'DESC')
                ->setMaxResults($maxAdds);
        $query = $qb->getQuery();
        
        return $query->getResult();
    }
    
    
    public function searchAnnonces( $page=1, $maxperpage=10, $data ){
        
        $qb = $this->createQueryBuilder('a');
             
        $cpt = 1 ;
        foreach ($data as $key => $value) {
            
            if($value === NULL )                continue;
            if($key == "withPhotos")            continue;
            
            // Specific cases
            if(is_object($value)){
                $qb->andWhere('a.'.$key.' = ?'.$cpt);
                $qb->setParameter($cpt, $value->getId());
                $cpt++;
                continue;
            }
            if($key == 'min_price'){
                $qb->andWhere('a.price >= ?'.$cpt);
                $qb->setParameter($cpt, $value);
                $cpt++;
                continue;
            }
            if($key == 'max_price'){
                $qb->andWhere('a.price <= ?'.$cpt);
                $qb->setParameter($cpt, $value);
                $cpt++;
                continue;
            }
            if($key == 'age'){
                $qb->andWhere('a.release > ?'.$cpt);
                $qb->setParameter($cpt, new \DateTime('-'.$value.' year'));
                $cpt++;
                continue;
            }


            
            // default
            $qb->andWhere('a.'.$key.' = ?'.$cpt);
            $qb->setParameter($cpt, $value);



             
             $cpt ++;
        }
        
       
        // check validty : select created_at, DATE_ADD(created_at, INTERVAL 2 year) from Annonce ;
        $qb->andWhere("DATE_ADD(a.validatedAt, a.validity, 'DAY') > CURRENT_DATE()");
        
        
        // Is valid adds ?
        $qb->andWhere("a.isEnabled = 1");      

        $qb->orderBy('a.createdAt', 'DESC');
        
        $qb->setFirstResult(($page-1) * $maxperpage)
            ->setMaxResults($maxperpage);
        
       //  return $qb->getQuery()->getResult();
        
       return new Paginator($qb);
        
        
    }
    
    
    public function getCountAdds(){
        $qb = $this->createQueryBuilder('a');
        return count($qb->getQuery()->getResult());
    }

    // find adds by user

    public function findAddsByUser($user = null){

        $qb = $this->createQueryBuilder('a');
        
        if( is_object($user)){
            $qb->andWhere('a.user = :USER');
            $qb->setParameter('USER', $user->getId());
        }
        $qb->orderBy('a.createdAt', 'DESC');
        $query = $qb->getQuery();
        
        $results = $query->getResult();
        // set add Status
        foreach ($results as $entity) {
            // annonce valides

            // par defaut l'annonce est en attente :: Etat 0
            $entity->setStatus(0);
            if($entity->getIsEnabled()){
                // Annonce valide :: Etat 1
                $entity->setStatus(1);
                $expireDate  = $entity->getValidatedAt()->modify('+'.$entity->getValidity().' day');
                $currentDate    =  new \DateTime();
                // $diff = date_diff($expireDate,$currentDate, false);
                // s$interval = $expireDate->diff($currentDate);

                // Vérifier si l'annonce est expirée
                if(strtotime($currentDate->format('Y-m-d')) > strtotime($expireDate->format('Y-m-d'))){
                    // Annonce expiré :: Etat 2
                    $entity->setStatus(2);
                    
                }
                

            }         
        }
        
        return $results ;
    }

    /*
    * Find annonces star
    */

    public function getStarAnnonces(){

        


        $retour = array();
        $seuilStarLimit = 10 ;
          
        // Par défaut on retourne toute la liste des annonces stars
        $query = $this->getEntityManager()->createQuery(
            'SELECT s.annonce FROM StarAnnoncesBundle:Star s WHERE s.status = 1');
        $results = $query->getResult();
        foreach ($results as $key => $value) {
            array_push($retour, $value['annonce']);
        }

        // vérifier si la durée n'est pas ecoulé 
        $arr_expired = array();
        foreach ($retour as $key => $value) {
            if($this->isExpiresStars($value))
                array_push($arr_expired, $value);
        }
        
        // si aucune annonce expirée, on retourne la liste actuellef
        if (count($arr_expired) == 0 and count($retour) == $seuil_Star_limit){
            return $this->execResults($retour);
        }

        // si non, on vérifier s'il y'on a des nouvelles annonces stars
        $arr_new_star = $this->getNewAddedAnnStars();
        
        // si aucune nouvelle annonce star trouvée, on retourne la liste actuelle
        if(count($arr_new_star) == 0){
            return $this->execResults($retour);
        }
        
        // si non 
        foreach ($arr_expired as $key => $value) {

             //$qB = $this->createQueryBuilder('p');
            $qB = $this->getEntityManager()->createQueryBuilder();
            $qB ->update('StarAnnoncesBundle:Star', 's')
                ->set('s.status', '?1')
                ->where('s.annonce = ?2')
                ->setParameter(1, '2')
                ->setParameter(2, $value);

            $query = $qB->getQuery();
            $query->execute();
            array_shift(array)

        }


        
        return $this->execResults($retour);
        


    }


    function isExpiresStars ($id){

        //Récuperer la seuil_Star_temp
        $query = $this->getEntityManager()->createQuery(
            'SELECT s.period FROM StarAnnoncesBundle:Seuil s');
        $results = $query->getResult()['0'];
        $seuilPeriod = $results['period'] ;

        // AND DATE_ADD( s.publishedAt , INTERVAL 7  DAY) > CURRENT_DATE()  
        $query = $this->getEntityManager()->createQuery(
            "SELECT s FROM StarAnnoncesBundle:Star s WHERE s.annonce = $id  
            AND s.status = 1
            AND DATE_ADD(s.publishedAt, $seuilPeriod , 'DAY') > CURRENT_DATE()
            ");
        $results = $query->getResult();


        if(count($results))
            return false;
        else
            return true;

        
    }

    function execResults($retour){
        $qb = $this->createQueryBuilder('a')
            ->orderBy('a.createdAt', 'DESC');
        
        // check validty : select created_at, DATE_ADD(created_at, INTERVAL 2 year) from Annonce ;
        $qb->andWhere("DATE_ADD(a.validatedAt, a.validity, 'DAY') > CURRENT_DATE()");

        // Is valid adds ?
        $qb->andWhere("a.isEnabled = 1");
        $qb->andWhere('a.id IN (:miarray)');
        $qb->orderBy('a.createdAt', 'DESC');

        $qb->setParameter('miarray', $retour);
                
        $query = $qb->getQuery();
        
        return $query->getResult();
    }

    function getNewAddedAnnStars(){
        $retour = array();
        $query = $this->getEntityManager()->createQuery(
            'SELECT s.annonce FROM StarAnnoncesBundle:Star s WHERE s.status = 0 ORDER BY s.createdAt ASC');
        $results = $query->getResult();
        foreach ($results as $key => $value) {
            array_push($retour, $value['annonce']);
        }
        return $retour;
    }


    

 }
